// <auto-generated />
using System;
using DataStore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataStore.Migrations
{
    [DbContext(typeof(PropertyDBContext))]
    [Migration("20241210191654_v5")]
    partial class v5
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DataStore.Entities.AdditionalLogoUrls", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<string>("additionalLogoUrls")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("PropertyId");

                    b.ToTable("AdditionalLogoUrls");
                });

            modelBuilder.Entity("DataStore.Entities.AuctionList", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<string>("auctionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("PropertyId");

                    b.ToTable("AuctionList");
                });

            modelBuilder.Entity("DataStore.Entities.BrochureMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<double>("latitude")
                        .HasColumnType("float");

                    b.Property<double>("longitude")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId")
                        .IsUnique();

                    b.ToTable("BrochureMap");
                });

            modelBuilder.Entity("DataStore.Entities.CustomData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsMyHomePassport")
                        .HasColumnType("bit");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId")
                        .IsUnique();

                    b.ToTable("CustomData");
                });

            modelBuilder.Entity("DataStore.Entities.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<double>("lat")
                        .HasColumnType("float");

                    b.Property<double>("lon")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId")
                        .IsUnique();

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("DataStore.Entities.Negotiator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NegotiatorId")
                        .HasColumnType("int");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<string>("WebSite")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId")
                        .IsUnique();

                    b.ToTable("Negotiator");
                });

            modelBuilder.Entity("DataStore.Entities.OpenViewings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("_openViewings")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.ToTable("OpenViewings");
                });

            modelBuilder.Entity("DataStore.Entities.Photos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<string>("_photo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("DataStore.Entities.Property", b =>
                {
                    b.Property<int>("PropertyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PropertyId"));

                    b.Property<DateTime>("ActivatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BathString")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BedsString")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BerRating")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BrochureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOnDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnergyRatingMediaPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("GroupLogoBgColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupLogoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupPhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupPremiumHeadTextColour")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupPremiumJointLogoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupPremiumLogoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupRectangularLogoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupUrlSlugIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasVideos")
                        .HasColumnType("bit");

                    b.Property<bool>("HasWebP")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBrandBooster")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBuildToRent")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBuildToRentDevelopment")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFavourite")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMappedAccurately")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNew")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPremiumAd")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrivateLandlord")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSaleAgreed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTopSpot")
                        .HasColumnType("bit");

                    b.Property<string>("JointGroupPremiumJointLogo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JointGroupRectangularLogoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MainPhoto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MainPhotoWeb")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderedDisplayAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PhotoCount")
                        .HasColumnType("int");

                    b.Property<string>("PriceAsString")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PriceChangeIsIncrease")
                        .HasColumnType("bit");

                    b.Property<string>("PropertyClass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PropertyClassId")
                        .HasColumnType("int");

                    b.Property<string>("PropertyClassUrlSlug")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PropertyStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PropertyType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RelatedPropertiesTotal")
                        .HasColumnType("int");

                    b.Property<int>("SaleTypeId")
                        .HasColumnType("int");

                    b.Property<string>("SeoDisplayAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SizeStringMeters")
                        .HasColumnType("int");

                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.HasKey("PropertyId");

                    b.ToTable("Property");
                });

            modelBuilder.Entity("DataStore.Entities.Relation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomDataId")
                        .HasColumnType("int");

                    b.Property<string>("RelationId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomDataId")
                        .IsUnique();

                    b.ToTable("Relations");
                });

            modelBuilder.Entity("DataStore.Entities.TravelTimes", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("_travelTimes")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("PropertyId");

                    b.ToTable("TravelTimes");
                });

            modelBuilder.Entity("DataStore.Entities.VirtualViewings", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("_virtualViewings")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("PropertyId");

                    b.ToTable("VirtualViewings");
                });

            modelBuilder.Entity("DataStore.Entities.AdditionalLogoUrls", b =>
                {
                    b.HasOne("DataStore.Entities.Property", "property")
                        .WithMany("AdditionalLogoUrls")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("property");
                });

            modelBuilder.Entity("DataStore.Entities.AuctionList", b =>
                {
                    b.HasOne("DataStore.Entities.Property", "property")
                        .WithMany("AuctionList")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("property");
                });

            modelBuilder.Entity("DataStore.Entities.BrochureMap", b =>
                {
                    b.HasOne("DataStore.Entities.Property", "property")
                        .WithOne("BrochureMap")
                        .HasForeignKey("DataStore.Entities.BrochureMap", "PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("property");
                });

            modelBuilder.Entity("DataStore.Entities.CustomData", b =>
                {
                    b.HasOne("DataStore.Entities.Property", "property")
                        .WithOne("CustomData")
                        .HasForeignKey("DataStore.Entities.CustomData", "PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("property");
                });

            modelBuilder.Entity("DataStore.Entities.Location", b =>
                {
                    b.HasOne("DataStore.Entities.Property", "property")
                        .WithOne("Location")
                        .HasForeignKey("DataStore.Entities.Location", "PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("property");
                });

            modelBuilder.Entity("DataStore.Entities.Negotiator", b =>
                {
                    b.HasOne("DataStore.Entities.Property", "property")
                        .WithOne("Negotiator")
                        .HasForeignKey("DataStore.Entities.Negotiator", "PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("property");
                });

            modelBuilder.Entity("DataStore.Entities.OpenViewings", b =>
                {
                    b.HasOne("DataStore.Entities.Property", "property")
                        .WithMany("OpenViewings")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("property");
                });

            modelBuilder.Entity("DataStore.Entities.Photos", b =>
                {
                    b.HasOne("DataStore.Entities.Property", "property")
                        .WithMany("Photos")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("property");
                });

            modelBuilder.Entity("DataStore.Entities.Relation", b =>
                {
                    b.HasOne("DataStore.Entities.CustomData", "CustomData")
                        .WithOne("RelatedPropertyIDs")
                        .HasForeignKey("DataStore.Entities.Relation", "CustomDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomData");
                });

            modelBuilder.Entity("DataStore.Entities.TravelTimes", b =>
                {
                    b.HasOne("DataStore.Entities.Property", "property")
                        .WithMany("TravelTimes")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("property");
                });

            modelBuilder.Entity("DataStore.Entities.VirtualViewings", b =>
                {
                    b.HasOne("DataStore.Entities.Property", "property")
                        .WithMany("VirtualViewings")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("property");
                });

            modelBuilder.Entity("DataStore.Entities.CustomData", b =>
                {
                    b.Navigation("RelatedPropertyIDs");
                });

            modelBuilder.Entity("DataStore.Entities.Property", b =>
                {
                    b.Navigation("AdditionalLogoUrls");

                    b.Navigation("AuctionList");

                    b.Navigation("BrochureMap")
                        .IsRequired();

                    b.Navigation("CustomData")
                        .IsRequired();

                    b.Navigation("Location")
                        .IsRequired();

                    b.Navigation("Negotiator")
                        .IsRequired();

                    b.Navigation("OpenViewings");

                    b.Navigation("Photos");

                    b.Navigation("TravelTimes");

                    b.Navigation("VirtualViewings");
                });
#pragma warning restore 612, 618
        }
    }
}
